---
import ProjectCard from './Card.astro'
import { localizePath } from 'astro-i18next'
import Markdown from '../Markdown'
import i18next, { t } from 'i18next'
import type { ProjectFrontmatter } from '~/types/mdx'
import { normalizeProjectCardProps } from '~/utils'
import AnimateOnce from '~/components/AnimateOnce'

export type Props = {
    simple?: boolean
}

const { simple = false } = Astro.props

const projects = await Astro.glob<ProjectFrontmatter>(`../../content/**/*.mdx`)
const filteredProjects = projects.filter(
    ({ frontmatter }) =>
        frontmatter.language === i18next.language &&
        frontmatter.type === 'project' &&
        !frontmatter.draft
)

const firstProjects = filteredProjects.slice(0, 2)
const lastProjects = filteredProjects.slice(2, 5)
---

<div class="custom-container flex flex-col gap-16 py-24 px-4">
    <div>
        <AnimateOnce client:load>
            <h2
                class="text-center text-2xl font-light sm:text-left sm:text-4xl"
            >
                <Markdown
                    source={t('featured.title', { ns: 'pages.projects' })}
                />
            </h2>
        </AnimateOnce>
        {
            !simple && (
                <AnimateOnce client:load delay={200}>
                    <p class="mx-auto mt-8 max-w-lg text-sm font-medium sm:ml-0 sm:text-base">
                        <Markdown
                            source={t('featured.description', {
                                ns: 'pages.projects',
                            })}
                        />
                    </p>
                </AnimateOnce>
            )
        }
    </div>
    <div>
        <div class="grid gap-16 md:grid-cols-2">
            {
                firstProjects.map(({ frontmatter }, i) => (
                    <AnimateOnce
                        client:load
                        delay={200 + i * 100}
                        className="h-full"
                    >
                        <ProjectCard
                            {...normalizeProjectCardProps(frontmatter)}
                            variant="medium"
                            localizedRootUrl={localizePath('/projects')}
                        />
                    </AnimateOnce>
                ))
            }
        </div>
        <div class="mt-16 grid gap-16 md:grid-cols-2 lg:grid-cols-3">
            {
                lastProjects.map(({ frontmatter }, i) => (
                    <AnimateOnce
                        client:load
                        delay={200 + i * 100}
                        className="h-full"
                    >
                        <ProjectCard
                            {...normalizeProjectCardProps(frontmatter)}
                            variant="small"
                            localizedRootUrl={localizePath('/projects')}
                        />
                    </AnimateOnce>
                ))
            }
        </div>
    </div>
</div>
